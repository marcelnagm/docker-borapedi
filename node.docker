

# Use a imagem oficial como imagem principal.
#FROM ubuntu
#FROM node:current
#FROM ubuntu:18.04
FROM ubuntu:20.04

RUN mkdir -p /app
RUN apt update 
ENV DEBIAN_FRONTEND="noninteractive" TZ="America/Manaus"
RUN DEBIAN_FRONTEND="noninteractive" apt-get -y install tzdata
# apt-get install --no-install-recommends --no-install-suggests -y \
RUN apt-get update && apt-get install -y \
    nodejs \
    yarn \
    npm 

# Defina o diretório de trabalho.
WORKDIR /app

# Copie o arquivo do seu host para o local atual.
COPY ./app/ ./

# Execute o comando dentro do seu sistema de arquivos de imagem.
RUN npm install
RUN npm install --save express
RUN npm install express

# Copie o restante do código-fonte do seu aplicativo do host para o sistema de arquivos de imagem.
#COPY . .

EXPOSE 3333
ENV LOG_CHANNEL=stderr
VOLUME /app
# EXPOSE 80 443
ENV PORT=3333
#ENV HOST=api.borapedi.com
# Execute o comando especificado dentro do contêiner.
CMD [ "npm", "install express" ]
CMD [ "npm", "install " ]
CMD [ "node", "index.js" ]

### LEIA-ME ###
## Processando o arquivo Dockerfile
# docker build -t alanmartines/nodejs-mywhats-api:1.0 .

## Criar um contêiner
# docker container run --name mywhats-api -p 9000:9000 -d alanmartines/nodejs-mywhats-api:1.0

## Acessar bash do container
# docker exec -it <container id> /bin/sh
# docker exec -it <container id> /bin/bash

## Removendo todos os containers e imagens de uma só vez
# docker rm $(docker ps -qa)

## Removendo todas as imagens de uma só vez
# docker rmi $(docker images -aq)

## Removendo imagens
# docker rmi <REPOSITORY>
# docker rmi <IMAGE ID>

## Como obter o endereço IP de um contêiner Docker do host
# https://stack.desenvolvedor.expert/appendix/docker/rede.html
# docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <IMAGE ID>
